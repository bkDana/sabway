<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="board">
	<select id="noticeTotal" parameterType="search" resultType="_int">
		select 
			count(*) cnt 
		from 
			notice
		<if test="searchType != null and searchType != ''">
			<if test="searchType.equals('title')">
				where LOWER(notice_title) like LOWER('%'||#{searchVal}||'%')
			</if>
			<if test="searchType.equals('content')">
				where LOWER(notice_content) like LOWER('%'||#{searchVal}||'%')
			</if>	
		</if>	
	</select>
	<select id="noticeList" parameterType="search" resultType="notice">
		select
			*
		from
			(select
				rownum rnum,
				n.*
			from 
				(select 
					notice_no as noticeNo, 
					notice_category as noticeCategory, 
					notice_title as noticeTitle, 
					filepath, 
					notice_date as noticeDate
				from 
					notice 
				<if test="searchType != null and searchType != ''">
					<if test="searchType.equals('title')">
						where LOWER(notice_title) like LOWER('%'||#{searchVal}||'%')
					</if>
					<if test="searchType.equals('content')">
						where LOWER(notice_content) like LOWER('%'||#{searchVal}||'%')
					</if>	
				</if>	
				order by 
					notice_date 
					<choose>
	  				<when test="orderBy!=null and orderBy!=''">
	  					<if test="orderBy.equals('new')">desc</if>
	  					<if test="orderBy.equals('old')"></if>
	  				</when>
	  				<otherwise>
	  					desc
	  				</otherwise>
		  		</choose>
				) n
			)
		where
			rnum between #{start} and #{end}
			
	</select>
	
	<select id="qnaTotal" parameterType="search" resultType="_int">
		select 
			count(*) cnt 
		from
			qna
		<if test="searchType != null and searchType != ''">
			<if test="searchType.equals('title')">
				where LOWER(qna_title) like LOWER('%'||#{searchVal}||'%')
			</if>
			<if test="searchType.equals('content')">
				where LOWER(qna_content) like LOWER('%'||#{searchVal}||'%')
			</if>	
		</if>	
	</select>
	<select id="qnaList" parameterType="search" resultType="qna">
		select
			*
		from
			(select
				rownum rnum,
				q.*
			from 
				(select 
					qna_no as qnaNo, 
					qna_category as qnaCategory, 
					qna_writer as qnaWriter, 
					qna_title as qnaTitle, 
					qna_content as qnaContent, 
					filename, 
					filepath, 
					qna_date as qnaDate
				from 
					qna 
				<if test="searchType != null and searchType != ''">
					<if test="searchType.equals('title')">
						where LOWER(qna_title) like LOWER('%'||#{searchVal}||'%')
					</if>
					<if test="searchType.equals('content')">
						where LOWER(qna_content) like LOWER('%'||#{searchVal}||'%')
					</if>	
				</if>	
				order by 
					qna_date 
					<choose>
	  				<when test="orderBy!=null and orderBy!=''">
	  					<if test="orderBy.equals('new')">desc</if>
	  					<if test="orderBy.equals('old')"></if>
	  				</when>
	  				<otherwise>
	  					desc
	  				</otherwise>
		  		</choose>
				) q
			)
		where
			rnum between #{start} and #{end}
			
	</select>
	
	<select id="reviewTotal" parameterType="search" resultType="_int">
		select 
			count(*) cnt 
		from 
			review
		<if test="searchType != null and searchType != ''">
			<if test="searchType.equals('title')">
				where LOWER(review_title) like LOWER('%'||#{searchVal}||'%')
			</if>
			<if test="searchType.equals('content')">
				where LOWER(review_content) like LOWER('%'||#{searchVal}||'%')
			</if>	
		</if>	
	</select>
	<select id="reviewList" parameterType="search" resultType="review">
		select
			*
		from
			(select
				rownum rnum,
				r.*
			from 
				(select 
					review_no as reviewNo, 
					review_title as reviewTitle, 
					review_writer as reviewWriter, 
					review_gender as reviewGender, 
					review_birthday as reviewBirthday, 
					review_item as reviewItem, 
					review_star_item as reviewStarItem, 
					review_branch as reviewBranch, 
					review_star_branch as reviewStarBranch,
					review_content as reviewContent, 
					review_hashtag as reviewHashtag, 
					filename, 
					filepath, 
					review_date as reviewDate
				from 
					review 
				<if test="searchType != null and searchType != ''">
					<if test="searchType.equals('title')">
						where LOWER(review_title) like LOWER('%'||#{searchVal}||'%')
					</if>
					<if test="searchType.equals('content')">
						where LOWER(review_content) like LOWER('%'||#{searchVal}||'%')
					</if>	
				</if>	
				order by 
					review_date 
					<choose>
	  				<when test="orderBy!=null and orderBy!=''">
	  					<if test="orderBy.equals('new')">desc</if>
	  					<if test="orderBy.equals('old')"></if>
	  				</when>
	  				<otherwise>
	  					desc
	  				</otherwise>
		  		</choose>
				) r
			)
		where
			rnum between #{start} and #{end}
			
	</select>
	<update id="addComment" parameterType="qna">
		update
			qna
		set
			qna_comment = #{qnaComment}
		where
			qna_no = #{qnaNo}
	</update>
	





	<!-- 아래부터 리뷰관련 -->
	<insert id="reviewInsert" parameterType="review">
		insert into review values(seq_review_no.nextval,#{reviewTitle},#{reviewWriter},'남자','911220',#{reviewItem},#{reviewStarItem},#{reviewBranch},
		#{reviewStarBranch},#{reviewContent},#{reviewHashtag},0,#{filename},#{filepath},sysdate)
	</insert>
	<select id="reviewTotalCount" resultType="_int">
		select count(*) cnt from review	
	</select>
	<select id="reviewSelectPaging" parameterType="pb" resultType="review">
		select review_no as reviewNo, review_title as reviewTitle, review_writer as reviewWriter, review_gender as reviewGender, review_birthday as reviewBirthday, 
		review_item as reviewItem, review_star_item as reviewStarItem, review_branch as reviewBranch, review_star_branch as reviewStarBranch,
		review_content as reviewContent, review_hashtag as reviewHashtag, filename, filepath, review_date as reviewDate from 
		(select rownum as rnum, m.* from (select * from review order by review_date desc) m)
		where rnum between #{start} and #{end}
	</select>
	<select id="reviewSelectAll" resultType="review">
		select review_no as reviewNo, review_title as reviewTitle, review_writer as reviewWriter, review_gender as reviewGender, review_birthday as reviewBirthday, 
		review_item as reviewItem, review_star_item as reviewStarItem, review_branch as reviewBranch, review_star_branch as reviewStarBranch,
		review_content as reviewContent, review_hashtag as reviewHashtag, filename, filepath, review_date as reviewDate from review order by review_no desc
	</select>
	<select id="reviewSelectOne" parameterType="_int" resultType="review">
		select review_no as reviewNo, review_title as reviewTitle, review_writer as reviewWriter, review_gender as reviewGender, review_birthday as reviewBirthday, 
		review_item as reviewItem, review_star_item as reviewStarItem, review_branch as reviewBranch, review_star_branch as reviewStarBranch, review_like as reviewLike,
		review_content as reviewContent, review_hashtag as reviewHashtag, filename, filepath, review_date as reviewDate from review where review_no=#{reviewNo}
	</select>
	<update id="reviewUpdate" parameterType="review">
		update review set review_no=#{reviewNo}, review_title = #{reviewTitle}, review_writer = #{reviewWriter}, review_gender = #{reviewGender}, 
		review_birthday = #{reviewBirthday}, review_item = #{reviewItem}, review_star_item = #{reviewStarItem}, review_branch = #{reviewBranch}, 
		review_star_branch = #{reviewStarBranch}, review_content = #{reviewContent}, review_hashtag = #{reviewHashtag}, filename=#{filename}, filepath=#{filepath}, 
		review_date = sysdate where review_no=#{reviewNo}
	</update>
	<delete id="reviewDelete" parameterType="_int">
		delete from review where review_no=#{reviewNo}
	</delete>
	<update id="likeUpInsert" parameterType="_int">
		update review set review_like = ((select review_like from review where review_no=#{reviewNo})+1) where review_no=#{reviewNo}
	</update>
	<update id="likeDownInsert" parameterType="_int">
		update review set review_like = ((select review_like from review where review_no=#{reviewNo})-1) where review_no=#{reviewNo}
	</update>
</mapper>